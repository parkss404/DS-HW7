/*
 *  doubly-linked-list.c
 *
 *  Doubly Linked List
 *
 *  Data Structures
 *  Department of Computer Science 
 *  at Chungbuk National University
 *
 */



#include<stdio.h>
#include<stdlib.h>
/* 필요한 헤더파일 추가 if necessary */


typedef struct Node {
	int key;
	struct Node* llink;
	struct Node* rlink;
} listNode;//구조체변수 선언



typedef struct Head {
	struct Node* first;
}headNode;//구조체변수 선언

/* 함수 리스트 */

/* note: initialize는 이중포인터를 매개변수로 받음
         lab3의 initialize와 차이점을 이해 할것 */
int initialize(headNode** h);

/* note: freeList는 싱글포인터를 매개변수로 받음
        - initialize와 왜 다른지 이해 할것
         - 이중포인터를 매개변수로 받아도 해제할 수 있을 것 */
int freeList(headNode* h);

int insertNode(headNode* h, int key);
int insertLast(headNode* h, int key);
int insertFirst(headNode* h, int key);
int deleteNode(headNode* h, int key);
int deleteLast(headNode* h);
int deleteFirst(headNode* h);
int invertList(headNode* h);

void printList(headNode* h);


int main()
{
	char command;
	int key;
	headNode* headnode=NULL;

	do{
        printf("[----- [박성준] [2021040026] -----]\n");
		printf("----------------------------------------------------------------\n");
		printf("                     Doubly Linked  List                        \n");
		printf("----------------------------------------------------------------\n");
		printf(" Initialize    = z           Print         = p \n");
		printf(" Insert Node   = i           Delete Node   = d \n");
		printf(" Insert Last   = n           Delete Last   = e\n");
		printf(" Insert First  = f           Delete First  = t\n");
		printf(" Invert List   = r           Quit          = q\n");
		printf("----------------------------------------------------------------\n");

		printf("Command = ");
		scanf(" %c", &command);

		switch(command) {
		case 'z': case 'Z':
			initialize(&headnode);
			break;
		case 'p': case 'P':
			printList(headnode);
			break;
		case 'i': case 'I':
			printf("Your Key = ");
			scanf("%d", &key);
			insertNode(headnode, key);
			break;
		case 'd': case 'D':
			printf("Your Key = ");
			scanf("%d", &key);
			deleteNode(headnode, key);
			break;
		case 'n': case 'N':
			printf("Your Key = ");
			scanf("%d", &key);
			insertLast(headnode, key);
			break;
		case 'e': case 'E':
			deleteLast(headnode);
			break;
		case 'f': case 'F':
			printf("Your Key = ");
			scanf("%d", &key);
			insertFirst(headnode, key);
			break;
		case 't': case 'T':
			deleteFirst(headnode);
			break;
		case 'r': case 'R':
			invertList(headnode);
			break;
		case 'q': case 'Q':
			freeList(headnode);
			break;
		default:
			printf("\n       >>>>>   Concentration!!   <<<<<     \n");
			break;
		}

	}while(command != 'q' && command != 'Q');

	return 1;
}


int initialize(headNode** h) {//더블 포인터 h선언

	if(*h != NULL)//headNode가 NULL이 아니면
		freeList(*h);//할당된 메모리 모두 해제 

	*h = (headNode*)malloc(sizeof(headNode));//*h에 메모리를 할당
	(*h)->first = NULL;//first 값 null로
	return 1;
}

int freeList(headNode* h){
	/* h와 연결된 listNode 메모리 해제
	 * headNode도 해제되어야 함.
	 */
	listNode* p = h->first;//headnode에 저장된 주소값을 리스트 노드의 주소값으로 

	listNode* prev = NULL;
	while(p != NULL) { //p값이 null이 아닐 때까지
		prev = p;
		p = p->rlink;//p의 rlink값을 p로
		free(prev);//prev 메모리 해제
	}
	free(h);//메모리 해제
	return 0;
}


void printList(headNode* h) {
	int i = 0;
	listNode* p; //리스트 노드의 주소를 나타내는 p 선언

	printf("\n---PRINT\n");

	if(h == NULL) { //헤드노드를 가르키는 주소값이가 비어있을 때
		printf("Nothing to print....\n");
		return;
	}

	p = h->first; //헤드노드의 주소값과 연결됨

	while(p != NULL) { //p가 가르키는 값이 없을 때까지 반복
		printf("[ [%d]=%d ] ", i, p->key);//인덱스와 키값 출력
		p = p->rlink;//p이동
		i++;//i값 증가
	}

	printf("  items = %d\n", i);//i값 출력
}




/**
 * list에 key에 대한 노드하나를 추가
 */
int insertLast(headNode* h, int key) {

	listNode* node = (listNode*)malloc(sizeof(listNode)); //node에 메모리 할당
	node->key = key;
	node->rlink = NULL;
	node->llink = NULL; //key,rlink,llink 정의

	if (h->first == NULL)//첫 주소를 가르키는 것이 null일 경우 
	{
		h->first = node; //node값을 첫주소로
		return 0;
	}

	listNode* n = h->first;//리스트노드의 주소를 가르키는 n의 값을 첫 주소로 설정
	while(n->rlink != NULL) { //리스트노드의 rlink가 null이아 닐때까지 반복 
		n = n->rlink; // n을 계속 갱신
	}
	n->rlink = node;//null값을 node로 바꿔준다.
	node->llink = n;//그때의 n을 llink로
	return 0;
}



/**
 * list의 마지막 노드 삭제
 */
int deleteLast(headNode* h) {

	if (h->first == NULL)//헤드노드의 주소값이 null이라면
	{
		printf("nothing to delete.\n");
		return 0;//리턴
	}

	listNode* n = h->first;//리스트노드 주소값 선언
	listNode* trail = NULL;

	/* 노드가 하나만 있는 경우, 즉 first node == last node인  경우 처리 */
	if(n->rlink == NULL) {//rlink의 값이 null일 경우
		h->first = NULL;//헤드노드의 퍼스트값이 null로
		free(n);//메모리 해제
		return 0;
	}

	/* 마지막 노드까지 이동 */
	while(n->rlink != NULL) {////rlink의 값이 null일 아닐때까지
		trail = n;//trail값은 n
		n = n->rlink;//
	}

	/* n이 삭제되므로, 이전 노드의 링크 NULL 처리 */
	trail->rlink = NULL;//trail의 rlink값을 null로 ,연결끊기
	free(n);//메모리 해제

	return 0;
}



/**
 * list 처음에 key에 대한 노드하나를 추가
 */
int insertFirst(headNode* h, int key) {

	listNode* node = (listNode*)malloc(sizeof(listNode));//메모리 할당
	node->key = key;
	node->rlink = node->llink = NULL;//node값,rlink값 선언

	if(h->first == NULL)//헤드노드의 퍼스트값이 null이면
	{
		h->first = node;//헤드노드의 퍼스트값을 노드값으로
		return 1;
	}

	node->rlink = h->first;
	node->llink = NULL;

	listNode *p = h->first;//리스트노드와 헤드노드 연결
	p->llink = node;//리스트노드의 llink값을 node로 
	h->first = node;//헤드노드의 퍼스트값을 node로 

	return 0;
}

/**
 * list의 첫번째 노드 삭제
 */
int deleteFirst(headNode* h) {

	if (h->first == NULL)//헤드노드의 퍼스트가 null일때
	{
		printf("nothing to delete.\n");
		return 0;
	}
	listNode* n = h->first;//연결
	h->first = n->rlink;//h->first값을 리스트노드의 rlink로

	free(n);//메모리 해제

	return 0;
}



/**
 * 리스트의 링크를 역순으로 재 배치
 */
int invertList(headNode* h) {


	if(h->first == NULL) {//헤드노드의 퍼스트가 null일때
		printf("nothing to invert...\n");
		return 0;
	}
	listNode *n = h->first;//연결
	listNode *trail = NULL;
	listNode *middle = NULL;//trail과 middle 선언

	while(n != NULL){ //n이 null값이 아닐때까지
		trail = middle;// trail은 middle값으로  
		middle = n;//middle은 n값으로 
		n = n->rlink;//n값 변환
		middle->rlink = trail;//rlink값을 trail로
		middle->llink = n;//llink값을 n으로
	}

	h->first = middle;//first에 middle값

	return 0;
}



/* 리스트를 검색하여, 입력받은 key보다 큰값이 나오는 노드 바로 앞에 삽입 */
int insertNode(headNode* h, int key) {

	listNode* node = (listNode*)malloc(sizeof(listNode)); //메모리 할당
	node->key = key; 
	node->llink = node->rlink = NULL; //key,rlink,llink 선언

	if (h->first == NULL)//퍼스트가 null이면
	{
		h->first = node;//퍼스트 = 노드값으로
		return 0;
	}

	listNode* n = h->first; // 연결

	while(n != NULL) {// n이 null 아닐 때까지
		if(n->key >= key) {//만약 입력받은 key값보다 기존 키 값이 더 크면
			// 첫 노드 앞에 삽입
			if(n == h->first) {//n이 퍼스트이면,
				insertFirst(h, key);//첫번째 대입 함수 실행
			} else { // 중간 or 마지막인 경우 
				node->rlink = n; //rlink값은 n
				node->llink = n->llink; //llink값은 n->llink
				n->llink->rlink = node; 
			}
			return 0;
		}

		n = n->rlink;//n값 변경
	}

	insertLast(h, key);//마지막에 삽입 
	return 0;
}


/**
 * list에서 key에 대한 노드 삭제
 */
int deleteNode(headNode* h, int key) {

	if (h->first == NULL)//퍼스트가 null이면
	{
		printf("nothing to delete.\n");
		return 1;
	}

	listNode* n = h->first;//연결

	while(n != NULL) {// n이 null 아닐 때까지
		if(n->key == key) {//만약 입력받은 key값보다 기존 키 값이 더 크면
			if(n == h->first) { // 첫 노드째 노드 인경우 
				deleteFirst(h);// 첫번째삭제함수 실행
			} else if (n->rlink == NULL){ // 마지막 노드인 경우
				deleteLast(h);//마지막 삭제함수 실행
			} else { // 중간인 경우
				n->llink->rlink = n->rlink;
				n->rlink->llink = n->llink;
				free(n);//메모리 할당
			}
			return 1;
		}

		n = n->rlink;//n은 rlink로
	}

	printf("cannot find the node for key = %d\n", key);// 찾지 못 하면 
	return 1;
}


